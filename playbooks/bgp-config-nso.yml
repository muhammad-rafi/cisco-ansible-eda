---
- name: BGP Max Prefixes Limit Fix with Cisco NSO
  hosts: cml-core-rtr02
  # hosts: cml_devices
  gather_facts: false
  connection: ansible.netcommon.network_cli
  collections:
    - ansible.netcommon
    - cisco.nso

  # ansible-playbook -i cml_hosts.yml playbooks/bgp-config-nso.yml
  # export NSO_URL=http://nso_url
  # export NSO_USERNAME=<nso_username>
  # export NSO_PASSWORD=<nso_password>

  vars:
    nso_url: "{{ lookup('env', 'NSO_URL') }}"
    nso_username: "{{ lookup('env', 'NSO_USERNAME') }}"
    nso_password: "{{ lookup('env', 'NSO_PASSWORD') }}"

  tasks:
    - name: CONFIGURE BGP MAX PREFIX LIST ON IOS-XR DEVICE
      cisco.nso.nso_config:
        url: "{{ nso_url }}/jsonrpc"
        username: "{{ nso_username }}"
        password: "{{ nso_password }}"
        validate_certs: false
        data:
          tailf-ncs:devices:
            device:
            - name: cml-core-rtr02
              config:
                tailf-ned-cisco-ios-xr:router:
                  bgp:
                    bgp-no-instance:
                      - id: 65001
                        neighbor:
                          - id: 192.168.5.14
                            address-family:
                              ipv4:
                                unicast:
                                  maximum-prefix:
                                    max-prefix-limit: 8
                                    threshold: 75
      register: config_output

    - name: Display output on the terminal
      ansible.builtin.debug:
        msg: "{{ config_output }}"

    - name: GET DEVICEs IN SYNC WITH NSO FROM DEVICEs
      nso_action:
        username: "{{ nso_username }}"
        password: "{{ nso_password }}"
        url: "{{ nso_url }}/jsonrpc"
        path: /ncs:devices/sync-from
        input: {} # sync from all devices 
        # input: { "device": ["{{ inventory_hostname }}"] } # sync from one device
      changed_when: False
      register: sync_from

    - name: Display output of the sync from
      ansible.builtin.debug:
        msg: "{{ sync_from }}"

    - name: CHECK DEVICEs IN SYNC WITH NSO
      nso_action:
        username: "{{ nso_username }}"
        password: "{{ nso_password }}"
        url: "{{ nso_url }}/jsonrpc"
        path: /ncs:devices/check-sync
        input: {}
      changed_when: False
      register: check_sync

    - name: Display output of the sync status
      ansible.builtin.debug:
        msg: "{{ check_sync }}"

    # - name: CHECK NSO DEVICE SYNC STATUS
    #   uri:
    #     url: "{{ nso_url }}/restconf/operations/tailf-ncs:devices/device={{inventory_hostname}}/check-sync"
    #     url_username: "{{ nso_username }}"
    #     url_password: "{{ nso_password }}"
    #     method: POST
    #     headers:
    #       Content-Type: application/yang-data+json
    #   register: check_sync

    # - name: Get the BGP Neighbor State
    #   cisco.iosxr.iosxr_command:
    #     commands: show bgp neighbor 192.168.5.14 detail | i BGP state
    #   register: bgp_output

    # - name: Display BGP Neighbor State
    #   debug:
    #     msg: "{{ bgp_output.stdout[0] }}"

    # - name: Extract BGP state
    #   set_fact:
    #     # bgp_state: "{{ bgp_output.stdout[0] | regex_search('BGP state = (\\w+)', '\\1') }}"
    #     bgp_state: "{{ bgp_output.stdout[0] | regex_search('Established') }}"

    # - name: Display BGP Neighbor State after set fact 
    #   debug:
    #     msg: "{{ bgp_state }}"

    # - name: Assert BGP state is Established
    #   assert:
    #     that:
    #       - bgp_state != 'Established'
    #     fail_msg: "BGP state is already Established. Current state: {{ bgp_state }}"
    #     success_msg: "BGP state is not Established. Proceeding with the playbook"

    # - name: Clear BGP neighbor if state is not Established
    #   cisco.iosxr.iosxr_command:
    #     commands:
    #       - clear bgp neighbor 192.168.5.14
    #   when: bgp_state_assert.failed == false