---
- name: BGP Max Prefixes Limit Fix
  hosts: "{{ target_host }}"
  gather_facts: false
  connection: ansible.netcommon.network_cli
  collections:
    - ansible.netcommon
    - cisco.iosxr
    - community.general.cisco_webex
  
  vars:
    script_dir: '~/cisco-ansible-eda/scripts' # select correct path in your system
    room_id: "{{ lookup('env', 'ROOM_ID') }}" # make sure you export ROOM_ID environmental variable
    token: "{{ lookup('env', 'WEBEX_TOKEN') }}" # make sure you export WEBEX_TOKEN environmental variable

  tasks:
    - name: Display extra vars coming from a rulebook
      ansible.builtin.debug:
        msg:
          - "Target Host: {{ target_host }}"
          - "BGP Neighbor Address: {{ bgp_neighbor }}"
          - "Local AS Number: {{ bgp_local_asn }}"
          - "Remote AS Number: {{ bgp_remote_asn }}"

    - name: Cisco Webex Teams - Markdown Message to a Room
      community.general.cisco_webex:
        recipient_type: roomId
        recipient_id: "{{ room_id }}"
        msg_type: markdown
        personal_token: "{{ token }}"
        msg: |
          **Device:** {{ target_host }} 
          **BGP Neighbor (Down):** {{ bgp_neighbor }} ⛔️
          **Remote ASN:** {{ bgp_remote_asn }} 
          **Reason:** Prefix limited exceeded

    - name: Run the Python script to fetch prefixes from PeeringDB
      ansible.builtin.shell:
        cmd: "python {{ script_dir }}/peerdb_py.py {{ bgp_remote_asn }}"
      register: peeringdb_result

    - name: Extract v4prefixes and v6prefixes
      ansible.builtin.set_fact:
        v4prefixes: "{{ peeringdb_result.stdout_lines[0] }}"
        v6prefixes: "{{ peeringdb_result.stdout_lines[1] }}"

    - name: Display v4prefixes and v6prefixes
      ansible.builtin.debug:
        msg: "v4prefixes: {{ v4prefixes }}, v6prefixes: {{ v6prefixes }}"

    - name: Merge the provided configuration with the existing running configuration
      cisco.iosxr.iosxr_bgp_neighbor_address_family:
        state: merged
        config:
          as_number: "{{ bgp_local_asn }}"
          neighbors:
            - neighbor_address: "{{ bgp_neighbor }}"
              address_family:
                - afi: ipv4
                  safi: unicast
                  maximum_prefix:
                    max_limit: "{{ v4prefixes }}"
                    threshold_value: 75
      when: ansible_network_os == 'cisco.iosxr.iosxr'

    - name: Clear the BGP Neighbor Session
      cisco.iosxr.iosxr_command:
        commands: clear bgp {{ bgp_neighbor }} graceful
      when: ansible_network_os == 'cisco.iosxr.iosxr'

    - name: Wait for the BGP Session Reset
      ansible.builtin.pause:
        prompt: "Waiting 30 sec for BGP reset"
        seconds: 30

    - name: Get the BGP Neighbor State
      cisco.iosxr.iosxr_command:
        commands: show bgp neighbor {{ bgp_neighbor }} | utility egrep "BGP state"
      register: bgp_output
      when: ansible_network_os == 'cisco.iosxr.iosxr'

    - name: Display BGP Neighbor State
      debug:
        msg: "{{ bgp_output.stdout_lines }}"

    - name: Cisco Webex Teams - Markdown Message to a Room if BGP is Established
      community.general.cisco_webex:
        recipient_type: roomId
        recipient_id: "{{ room_id }}"
        msg_type: markdown
        personal_token: "{{ token }}"
        msg: |
          **Device:** {{ target_host }} 
          **BGP Neighbor (UP):** {{ bgp_neighbor }} ✅
          **Remote ASN:** {{ bgp_remote_asn }} 
      when: bgp_output.stdout | regex_search('BGP state = Established')

# # ansible-playbook playbooks/bgp-max-pfx-fix.yml --check
# # ansible-playbook playbooks/bgp-max-pfx-fix.yml -e 'bgp_remote_asn=14570'
