---
- name: BGP Max Prefixes Limit Fix
  hosts: "{{ target_host }}"
  gather_facts: false
  connection: ansible.netcommon.network_cli
  collections:
    - ansible.netcommon
    - cisco.iosxr
    - community.general.cisco_webex
    - community.hashi_vault
  
  vars:
    - vault_addr: "{{ lookup('env', 'VAULT_ADDR') }}"
    - vault_token: "{{ lookup('env', 'VAULT_TOKEN') }}"
    - room_id: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cml_secrets/data/webex_secrets:bgp_room_id token={{ vault_token }} url={{ vault_addr }} verify=false') }}"
    - token: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cml_secrets/data/webex_secrets:webex_token token={{ vault_token }} url={{ vault_addr }} verify=false') }}"
    - peerdb_api_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cml_secrets/data/peeringdb_secret:peeringdb_key token={{ vault_token }} url={{ vault_addr }} verify=false') }}"
    - snow_instance: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cml_secrets/data/snow_secrets:snow_instance token={{ vault_token }} url={{ vault_addr }} verify=false') }}"
    - snow_username: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cml_secrets/data/snow_secrets:snow_username token={{ vault_token }} url={{ vault_addr }} verify=false') }}"
    - snow_password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cml_secrets/data/snow_secrets:snow_password token={{ vault_token }} url={{ vault_addr }} verify=false') }}"
    - test: false

  tasks:
    # - name: Disable InsecureRequestWarning
    #   ansible.builtin.set_fact:
    #     disable_warnings: |
    #       import urllib3
    #       urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    #   run_once: true
    #   delegate_to: localhost

    - name: Display the secrets variable from the Hashicorp Vault 
      ansible.builtin.debug:
        msg:
          - "snow_instance: {{ snow_instance }}"
          - "snow_username: {{ snow_username }}"
          - "snow_password: {{ snow_password }}"
          - "webex_token: {{ token }}"
          - "room_id: {{ webex_secrets.bgp_room_id }}"
          - "peeringdb_api_key: {{ peerdb_api_key }}"
      when: test|bool == true

    - name: Display extra vars coming from a rulebook
      ansible.builtin.debug:
        msg:
          - "Target Host: {{ target_host }}"
          - "BGP Neighbor Address: {{ bgp_neighbor }}"
          - "Local AS Number: {{ bgp_local_asn }}"
          - "Remote AS Number: {{ bgp_remote_asn }}"
          - "Address Family: {{ ansible_eda.event.body.fields['af_data/af_name'] }}"
          - "Prefix Limit: {{ ansible_eda.event.body.fields['af_data/max_prefix_limit'] }}"
          - "Prefix Limit Threshold: {{ ansible_eda.event.body.fields['af_data/max_prefix_threshold_percent'] }}"
          - "Reason for BGP Down: {{ ansible_eda.event.body.fields.reset_reason }}"

    - name: Cisco Webex Teams - Markdown Message to a Room for BGP State
      community.general.cisco_webex:
        recipient_type: roomId
        recipient_id: "{{ room_id }}"
        msg_type: markdown
        personal_token: "{{ token }}"
        msg: |
          **Device:** {{ target_host }} 
          **BGP Neighbor (Down):** {{ bgp_neighbor }} ⛔️
          **Description:** {{ ansible_eda.event.body.fields.description | default('N/A') }}
          **Remote ASN:** {{ bgp_remote_asn }}
          **Address Family:** "{{ ansible_eda.event.body.fields['af_data/af_name'] }}"
          **Prefix Limit:** {{ ansible_eda.event.body.fields['af_data/max_prefix_limit'] | default('N/A') }}
          **Prefix Limit Threshold:** {{ ansible_eda.event.body.fields['af_data/max_prefix_threshold_percent'] | default('N/A') }}
          **Reason:** {{ ansible_eda.event.body.fields.reset_reason | default('N/A') }}

    - name: Query PeeringDB for the Remote BGP ASN Prefix Limits
      ansible.builtin.uri:
        url: "https://www.peeringdb.com/api/net?asn={{ bgp_remote_asn }}&key={{ peerdb_api_key }}"
        method: GET
        body_format: "json"
        return_content: false
      register: peeringdb_result
      failed_when: peeringdb_result.status != 200

    - name: set facts for the playbook 
      ansible.builtin.set_fact:
        v4prefixes: "{{ peeringdb_result.json.data[0].info_prefixes4 | default('N/A') }}"
        v6prefixes: "{{ peeringdb_result.json.data[0].info_prefixes6 | default('N/A') }}"
        address_family: "{{ ansible_eda.event.body.fields['af_data/af_name'] | default('N/A') }}"
        prefix_limit: "{{ ansible_eda.event.body.fields['af_data/max_prefix_limit'] }}"
        neighbor_desc: "{{ ansible_eda.event.body.fields.description | default('N/A') }}"
        vrf_name: "{{ ansible_eda.event.body.fields.vrf_name | default('N/A') }}"

    - name: Display IPv4 and IPv6 prefixes limit defined in PeerdingDB
      ansible.builtin.debug:
        msg: "IPv4 prefixes limit: {{ v4prefixes }}, IPv6 prefixes Limit: {{ v6prefixes }}"

    - name: Comparing the current IPv4 prefix limit with the prefix limit defined in PeeringDB
      ansible.builtin.assert:
        success_msg:  "Assert that prefix limit: {{ v4prefixes }} defined in PeeringDB is greater than the Current IPv4: {{ prefix_limit }}"
        fail_msg: "Current IPv4: {{ prefix_limit }} is equal to or less than prefix limit: {{ v4prefixes }} defined in PeeringDB"
        that:
          - "(v4prefixes | to_int) > (prefix_limit | to_int)"
        quiet: false
      when: address_family == 'ipv4' and vrf_name == 'default'

    - name: Comparing the current IPv6 prefix limit with the prefix limit defined in PeeringDB
      ansible.builtin.assert:
        success_msg:  "Assert that prefix limit: {{ v6prefixes }} defined in PeeringDB is greater than the Current IPv6: {{ prefix_limit }}"
        fail_msg: "Current IPv6: {{ prefix_limit }} is equal to or less than prefix limit: {{ v6prefixes }} defined in PeeringDB"
        that:
          - "(v6prefixes | to_int) > (prefix_limit | to_int)"
        quiet: false
      when: address_family == 'ipv6' and vrf_name == 'default'

    - name: Create change request
      servicenow.itsm.change_request:
        instance:
          host: "https://{{ snow_instance }}"
          username: "{{ snow_username }}"
          password: "{{ snow_password }}"
        template: "BGP Max Prefix Limit Update - 3"
        type: standard
        state: scheduled # or new
        assignment_group: Network
        category: "Network"
        short_description: Update BGP Prefix Limit and Clear BGP Session
        other:
          # start_date: "2024-05-07 15:00:00"
          # end_date: "2024-05-07 16:00:00"
          cmdb_ci: "{{ target_host }}"
          business_service: "IT Services"
          justification: "To bring the BGP session up that is down due to prefix limit exceeded"
          risk_impact_analysis: "No risk involved"
          # assigned_to: "Muhammad Rafi"
      register: change_created

    - name: Set fact for the SNOW change number 
      ansible.builtin.set_fact:
        change_number: "{{ change_created.diff.after.number }}"

    - name: Mark change request as in progress/implement
      servicenow.itsm.change_request:
        instance:
          host: "https://{{ snow_instance }}"
          username: "{{ snow_username }}"
          password: "{{ snow_password }}"
        number: "{{ change_number }}"
        state: implement
      register: change_implement

    - name: Updating BGP peer configuration by merging with the existing running configuration
      cisco.iosxr.iosxr_bgp_neighbor_address_family:
        state: merged
        config:
          as_number: "{{ bgp_local_asn }}"
          neighbors:
            - neighbor_address: "{{ bgp_neighbor }}"
              address_family:
                - afi: "{{ address_family }}"
                  safi: unicast
                  maximum_prefix:
                    max_limit: "{{ v4prefixes }}"
                    threshold_value: 75
      when: ansible_network_os == 'cisco.iosxr.iosxr'

    - name: Clear the BGP Neighbor Session
      cisco.iosxr.iosxr_command:
        commands: clear bgp {{ bgp_neighbor }} graceful
      when: ansible_network_os == 'cisco.iosxr.iosxr' and vrf_name == 'default'

    - name: Wait for the BGP Session Reset
      ansible.builtin.pause:
        prompt: "Waiting 30 sec for BGP reset"
        seconds: 30

    - name: Mark change request as in review
      servicenow.itsm.change_request:
        instance:
          host: "https://{{ snow_instance }}"
          username: "{{ snow_username }}"
          password: "{{ snow_password }}"
        number: "{{ change_number }}"
        state: review
      register: change_review

    - name: Get the BGP Neighbor State
      cisco.iosxr.iosxr_command:
        commands: show bgp neighbor {{ bgp_neighbor }} | utility egrep "BGP state"
      register: bgp_output
      when: ansible_network_os == 'cisco.iosxr.iosxr' and vrf_name == 'default'

    - name: Display BGP Neighbor State
      debug:
        msg: "{{ bgp_output.stdout_lines }}"

    - name: Cisco Webex Teams - Markdown Message to a Room if IPv4 BGP is Established
      community.general.cisco_webex:
        recipient_type: roomId
        recipient_id: "{{ room_id }}"
        msg_type: markdown
        personal_token: "{{ token }}"
        msg: |
          **Device:** {{ target_host }} 
          **BGP Neighbor (UP):** {{ bgp_neighbor }} ✅
          **Description:** {{ neighbor_desc }}
          **Remote ASN:** {{ bgp_remote_asn }}
          **Address Family:** {{ address_family }}
          **Prefix Limit:** {{ v4prefixes }}
      when: bgp_output.stdout | regex_search('BGP state = Established') and address_family == 'ipv4'

    - name: Cisco Webex Teams - Markdown Message to a Room if IPv6 BGP is Established
      community.general.cisco_webex:
        recipient_type: roomId
        recipient_id: "{{ room_id }}"
        msg_type: markdown
        personal_token: "{{ token }}"
        msg: |
          **Device:** {{ target_host }} 
          **BGP Neighbor (UP):** {{ bgp_neighbor }} ✅
          **Description:** {{ neighbor_desc }}
          **Remote ASN:** {{ bgp_remote_asn }}
          **Address Family:** {{ address_family }}
          **Prefix Limit:** {{ v6prefixes }}
      when: bgp_output.stdout | regex_search('BGP state = Established') and address_family == 'ipv6'

    - name: Close the change request
      servicenow.itsm.change_request:
        instance:
          host: "https://{{ snow_instance }}"
          username: "{{ snow_username }}"
          password: "{{ snow_password }}"
        number: "{{ change_number }}"
        close_code: "successful"
        close_notes: "change completed and closed with ansible"
        state: closed
        # other:
        #   work_start: "05-04-2024 11:00:00"
        #   work_end: "05-04-2024 11:36:00"
        #   work_notes: "some notes"
      register: closed_change
