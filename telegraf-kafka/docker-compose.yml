# docker compose -f docker-compose.yml up -d
version: "3"
services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    restart: unless-stopped
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: true
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - telemetry_network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    hostname: kafka
    restart: unless-stopped
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://10.250.78.80:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "cisco-telemetry:1:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      JAVA_OPTS: "-Xms256m -Xmx256m"
      ALLOW_PLAINTEXT_LISTENER: yes
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - telemetry_network

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    hostname: kafdrop
    restart: "no"
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      # JVM_OPTS: "-Xms16M -Xmx512M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - kafka
    networks:
      - telemetry_network

  telegraf_1:
    image: telegraf:latest
    restart: always
    container_name: telegraf_1
    hostname: telegraf_1
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    ports:
      - 57501:57501
    networks:
      - telemetry_network

networks:
  telemetry_network:
      name: telemetry_network
      driver: bridge

